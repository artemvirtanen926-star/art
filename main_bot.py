
import asyncio
import logging
import os
import requests
import json
from datetime import datetime, timedelta
from typing import Dict, Any, List
import threading
from dotenv import load_dotenv

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
from aiohttp import web, web_response
import aiohttp

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, 
                          InlineKeyboardButton)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8326095098:AAHVE8r5qaS8V2raYQgvi1Gz9dPEbUZ9ll8")
HUGGINGFACE_TOKEN = os.getenv("HUGGINGFACE_API_TOKEN")

# –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ù–ê–õ–û–í –î–õ–Ø –ü–û–î–ü–ò–°–ö–ò (–¢–í–û–ò –ö–ê–ù–ê–õ–´!)
REQUIRED_CHANNELS = [
    {
        "id": os.getenv("CHANNEL_1", "@kanal1kkal"), 
        "url": "https://t.me/kanal1kkal", 
        "name": "üèõÔ∏è Artemius AI",
        "description": "–ì–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
    },
    {
        "id": os.getenv("CHANNEL_2", "@kanal2kkal"), 
        "url": "https://t.me/kanal2kkal", 
        "name": "üì¢ AI –ù–æ–≤–æ—Å—Ç–∏",
        "description": "–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
    }
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BotStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_image_prompt = State()
    waiting_for_music_prompt = State()
    waiting_for_video_prompt = State()
    waiting_for_document = State()

# –õ–ò–ú–ò–¢–´
FREE_LIMITS = {
    'chat': 3,
    'images': 1,
    'music': 1,
    'video': 1,
    'documents': 2
}

VIP_LIMITS = {
    'chat': 25,
    'images': 10,
    'music': 5,
    'video': 3,
    'documents': 8
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
subscription_cache = {}
user_stats = {}
user_limits = {}

# KEEP-ALIVE –í–ï–ë-–°–ï–†–í–ï–†
async def keep_alive_handler(request):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    uptime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return web_response.json_response({
        "status": "alive",
        "bot": "Artemius AI",
        "uptime": uptime,
        "message": "üèõÔ∏è Artemius AI —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Replit!",
        "channels": [ch["id"] for ch in REQUIRED_CHANNELS]
    })

async def status_handler(request):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    total_users = len(user_stats)
    return web_response.json_response({
        "bot_name": "Artemius AI",
        "status": "running",
        "total_users": total_users,
        "channels": REQUIRED_CHANNELS
    })

# –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
web_app = web.Application()
web_app.router.add_get('/', keep_alive_handler)
web_app.router.add_get('/ping', keep_alive_handler)
web_app.router.add_get('/status', status_handler)
web_app.router.add_get('/health', keep_alive_handler)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–º)
async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã"""
    try:
        now = datetime.now()
        if user_id in subscription_cache:
            cached_time, is_subscribed = subscription_cache[user_id]
            if (now - cached_time).total_seconds() < 300:
                return is_subscribed

        all_subscribed = True
        for channel in REQUIRED_CHANNELS:
            try:
                member = await bot.get_chat_member(channel["id"], user_id)
                if member.status not in ['member', 'administrator', 'creator']:
                    all_subscribed = False
                    break
            except:
                all_subscribed = False
                break

        subscription_cache[user_id] = (now, all_subscribed)
        return all_subscribed

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def check_individual_subscriptions(user_id: int) -> Dict[str, bool]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –æ—Ç–¥–µ–ª—å–Ω–æ"""
    try:
        subscriptions = {}
        for channel in REQUIRED_CHANNELS:
            try:
                member = await bot.get_chat_member(channel["id"], user_id)
                subscriptions[channel["id"]] = member.status in ['member', 'administrator', 'creator']
            except:
                subscriptions[channel["id"]] = False
        return subscriptions
    except:
        return {ch["id"]: False for ch in REQUIRED_CHANNELS}

def get_user_stats(user_id: int) -> dict:
    if user_id not in user_stats:
        user_stats[user_id] = {
            'total_messages': 0,
            'total_images': 0,
            'total_music': 0,
            'total_videos': 0,
            'total_documents': 0,
            'first_seen': datetime.now().isoformat()
        }
    return user_stats[user_id]

def get_daily_usage(user_id: int) -> dict:
    today = datetime.now().date().isoformat()
    if user_id not in user_limits:
        user_limits[user_id] = {}
    if today not in user_limits[user_id]:
        user_limits[user_id][today] = {
            'chat': 0,
            'images': 0,
            'music': 0,
            'video': 0,
            'documents': 0
        }
    return user_limits[user_id][today]

async def check_limit(user_id: int, feature: str) -> bool:
    is_vip = await check_subscription(user_id)
    daily = get_daily_usage(user_id)
    limits = VIP_LIMITS if is_vip else FREE_LIMITS
    return daily[feature] < limits[feature]

def use_feature(user_id: int, feature: str):
    daily = get_daily_usage(user_id)
    daily[feature] += 1
    stats = get_user_stats(user_id)
    stats[f'total_{feature}'] = stats.get(f'total_{feature}', 0) + 1

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def get_main_menu(user_id: int):
    is_vip = await check_subscription(user_id)
    status_emoji = "‚≠ê" if is_vip else "üîí"
    status_text = "VIP —Ä–µ–∂–∏–º" if is_vip else "–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø"

    keyboard = [
        [KeyboardButton(text="üí¨ –ß–∞—Ç —Å Artemius"), KeyboardButton(text="üé® –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")],
        [KeyboardButton(text="üéµ –°–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é"), KeyboardButton(text="üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ")],
        [KeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç"), KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text=f"{status_emoji} {status_text}"), KeyboardButton(text="üì¢ –ü–æ–ª—É—á–∏—Ç—å VIP")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def get_subscription_menu(user_id: int):
    individual_subs = await check_individual_subscriptions(user_id)
    keyboard = []

    for channel in REQUIRED_CHANNELS:
        is_subscribed = individual_subs.get(channel["id"], False)
        status_emoji = "‚úÖ" if is_subscribed else "üì¢"
        status_text = "–ü–æ–¥–ø–∏—Å–∞–Ω" if is_subscribed else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"

        keyboard.append([InlineKeyboardButton(
            text=f"{status_emoji} {channel['name']} ‚Ä¢ {status_text}", 
            url=channel["url"]
        )])

    keyboard.append([InlineKeyboardButton(text="‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ", callback_data="separator")])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å VIP", callback_data="check_subscriptions")])
    keyboard.append([InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –±–∞–∑–æ–≤—ã–º –¥–æ—Å—Ç—É–ø–æ–º", callback_data="skip_subscriptions")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_back_menu():
    keyboard = [[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    is_vip = await check_subscription(user_id)

    if is_vip:
        welcome_text = f"""üèõÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!**

‚≠ê **VIP –°–¢–ê–¢–£–° –ê–ö–¢–ò–í–ï–ù!** 
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã!

üöÄ **–í–ê–®–ò VIP-–õ–ò–ú–ò–¢–´:**
üí¨ –î–∏–∞–ª–æ–≥–∏ ‚Äî **{VIP_LIMITS['chat']} –≤ –¥–µ–Ω—å**
üé® –ö–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî **{VIP_LIMITS['images']} –≤ –¥–µ–Ω—å**  
üéµ –ú—É–∑—ã–∫–∞ ‚Äî **{VIP_LIMITS['music']} –≤ –¥–µ–Ω—å**
üé¨ –í–∏–¥–µ–æ ‚Äî **{VIP_LIMITS['video']} –≤ –¥–µ–Ω—å**
üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî **{VIP_LIMITS['documents']} –≤ –¥–µ–Ω—å**

üèõÔ∏è –†–∞–±–æ—Ç–∞–µ–º –Ω–∞ Replit 24/7!"""

        reply_markup = await get_main_menu(user_id)
    else:
        welcome_text = f"""üèõÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Artemius AI!**

ü§ñ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ Replit!

üîí **–¢–ï–ö–£–©–ò–ï –õ–ò–ú–ò–¢–´ (–±–∞–∑–æ–≤—ã–π):**
üí¨ –î–∏–∞–ª–æ–≥–∏ ‚Äî **{FREE_LIMITS['chat']} –≤ –¥–µ–Ω—å**
üé® –ö–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî **{FREE_LIMITS['images']} –≤ –¥–µ–Ω—å**  
üéµ –ú—É–∑—ã–∫–∞ ‚Äî **{FREE_LIMITS['music']} –≤ –¥–µ–Ω—å**
üé¨ –í–∏–¥–µ–æ ‚Äî **{FREE_LIMITS['video']} –≤ –¥–µ–Ω—å**
üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî **{FREE_LIMITS['documents']} –≤ –¥–µ–Ω—å**

‚≠ê **–ü–û–õ–£–ß–ò–¢–ï VIP –°–¢–ê–¢–£–°:**
üí¨ **{VIP_LIMITS['chat']} –¥–∏–∞–ª–æ–≥–æ–≤** (+{VIP_LIMITS['chat'] - FREE_LIMITS['chat']})
üé® **{VIP_LIMITS['images']} –∫–∞—Ä—Ç–∏–Ω–æ–∫** (+{VIP_LIMITS['images'] - FREE_LIMITS['images']})
üéµ **{VIP_LIMITS['music']} –∫–æ–º–ø–æ–∑–∏—Ü–∏–π** (+{VIP_LIMITS['music'] - FREE_LIMITS['music']})
üé¨ **{VIP_LIMITS['video']} –≤–∏–¥–µ–æ** (+{VIP_LIMITS['video'] - FREE_LIMITS['video']})
üìÑ **{VIP_LIMITS['documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** (+{VIP_LIMITS['documents'] - FREE_LIMITS['documents']})

üì¢ **–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞!**"""

        reply_markup = await get_subscription_menu(user_id)

    await message.answer(welcome_text, reply_markup=reply_markup, parse_mode="Markdown")

async def show_limit_exhausted(message: types.Message, feature: str):
    user_id = message.from_user.id
    is_vip = await check_subscription(user_id)

    feature_names = {
        'chat': '–¥–∏–∞–ª–æ–≥–æ–≤',
        'images': '–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        'music': '—Å–æ–∑–¥–∞–Ω–∏—è –º—É–∑—ã–∫–∏', 
        'video': '–≤–∏–¥–µ–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
        'documents': '–∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
    }

    if is_vip:
        text = f"üö´ **–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç {feature_names[feature]}!**\n\n‚è∞ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤—è—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ú–°–ö"
        await message.answer(text, parse_mode="Markdown")
    else:
        text = f"""üö´ **–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç {feature_names[feature]}!**

‚≠ê **–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å VIP —Å—Ç–∞—Ç—É—Å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!**

üöÄ **–í–°–ï VIP –ë–û–ù–£–°–´:**
üí¨ {VIP_LIMITS['chat']} –¥–∏–∞–ª–æ–≥–æ–≤ (+{VIP_LIMITS['chat'] - FREE_LIMITS['chat']})
üé® {VIP_LIMITS['images']} –∫–∞—Ä—Ç–∏–Ω–æ–∫ (+{VIP_LIMITS['images'] - FREE_LIMITS['images']})
üéµ {VIP_LIMITS['music']} –∫–æ–º–ø–æ–∑–∏—Ü–∏–π (+{VIP_LIMITS['music'] - FREE_LIMITS['music']})
üé¨ {VIP_LIMITS['video']} –≤–∏–¥–µ–æ (+{VIP_LIMITS['video'] - FREE_LIMITS['video']})
üìÑ {VIP_LIMITS['documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (+{VIP_LIMITS['documents'] - FREE_LIMITS['documents']})"""

        await message.answer(text, reply_markup=await get_subscription_menu(user_id), parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
@dp.message(F.text == "üí¨ –ß–∞—Ç —Å Artemius")
async def chat_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await check_limit(user_id, 'chat'):
        await show_limit_exhausted(message, 'chat')
        return

    await state.set_state(BotStates.waiting_for_text)
    await message.answer("üèõÔ∏è **Artemius –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!**\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!", reply_markup=get_back_menu(), parse_mode="Markdown")

@dp.message(F.text == "üé® –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
async def image_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await check_limit(user_id, 'images'):
        await show_limit_exhausted(message, 'images')
        return

    await state.set_state(BotStates.waiting_for_image_prompt)
    await message.answer("üé® **Artemius Art Studio!**\n\n–û–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å:", reply_markup=get_back_menu(), parse_mode="Markdown")

@dp.message(F.text == "üéµ –°–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é")
async def music_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await check_limit(user_id, 'music'):
        await show_limit_exhausted(message, 'music')
        return

    await state.set_state(BotStates.waiting_for_music_prompt)
    await message.answer("üéµ **Artemius Music!**\n\n–û–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –º—É–∑—ã–∫—É —Å–æ–∑–¥–∞—Ç—å:", reply_markup=get_back_menu(), parse_mode="Markdown")

@dp.message(F.text == "üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ")
async def video_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await check_limit(user_id, 'video'):
        await show_limit_exhausted(message, 'video')
        return

    await state.set_state(BotStates.waiting_for_video_prompt)
    await message.answer("üé¨ **Artemius Video!**\n\n–û–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞—Ç—å:", reply_markup=get_back_menu(), parse_mode="Markdown")

@dp.message(F.text == "üìÑ –î–æ–∫—É–º–µ–Ω—Ç")
async def document_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not await check_limit(user_id, 'documents'):
        await show_limit_exhausted(message, 'documents')
        return

    await state.set_state(BotStates.waiting_for_document)
    await message.answer("üìÑ **Artemius OCR!**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", reply_markup=get_back_menu(), parse_mode="Markdown")

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    is_vip = await check_subscription(user_id)
    daily = get_daily_usage(user_id)
    limits = VIP_LIMITS if is_vip else FREE_LIMITS

    status = "‚≠ê VIP –ê–ö–¢–ò–í–ï–ù!" if is_vip else "üîí –ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø"

    profile_text = f"""üë§ **–ü—Ä–æ—Ñ–∏–ª—å Artemius AI**

{status}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:**
üí¨ –î–∏–∞–ª–æ–≥–∏: {daily['chat']}/{limits['chat']}
üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {daily['images']}/{limits['images']}  
üéµ –ú—É–∑—ã–∫–∞: {daily['music']}/{limits['music']}
üé¨ –í–∏–¥–µ–æ: {daily['video']}/{limits['video']}
üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {daily['documents']}/{limits['documents']}

üèõÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Replit 24/7!"""

    reply_markup = None if is_vip else await get_subscription_menu(user_id)
    await message.answer(profile_text, reply_markup=reply_markup, parse_mode="Markdown")

@dp.message(F.text.in_(["‚≠ê VIP —Ä–µ–∂–∏–º", "üîí –ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø", "üì¢ –ü–æ–ª—É—á–∏—Ç—å VIP"]))
async def subscription_info_handler(message: types.Message):
    user_id = message.from_user.id
    is_vip = await check_subscription(user_id)

    if is_vip:
        await message.answer("‚≠ê **VIP –°–¢–ê–¢–£–° –ê–ö–¢–ò–í–ï–ù!**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", parse_mode="Markdown")
    else:
        await message.answer("‚≠ê **–ü–æ–ª—É—á–∏—Ç–µ VIP —Å—Ç–∞—Ç—É—Å!**\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:", reply_markup=await get_subscription_menu(user_id), parse_mode="Markdown")

# –ö–æ–ª–ª–±–µ–∫–∏
@dp.callback_query(F.data == "check_subscriptions")
async def check_subscriptions_callback(callback: types.CallbackQuery):
    await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é...")
    user_id = callback.from_user.id

    if user_id in subscription_cache:
        del subscription_cache[user_id]

    is_vip = await check_subscription(user_id)

    if is_vip:
        await callback.message.answer("‚úÖ **VIP –°–¢–ê–¢–£–° –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!**", reply_markup=await get_main_menu(user_id), parse_mode="Markdown")
    else:
        await callback.message.answer("‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –û–ë–ê –∫–∞–Ω–∞–ª–∞!", reply_markup=await get_subscription_menu(user_id), parse_mode="Markdown")

@dp.callback_query(F.data == "skip_subscriptions")
async def skip_subscriptions_callback(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    await callback.message.answer("üîí **–ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω**", reply_markup=await get_main_menu(user_id))

@dp.callback_query(F.data == "separator")
async def separator_callback(callback: types.CallbackQuery):
    await callback.answer()

@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    await message.answer("üèõÔ∏è **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**", reply_markup=await get_main_menu(user_id))

# AI —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏)
@dp.message(StateFilter(BotStates.waiting_for_text))
async def process_chat_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    use_feature(user_id, 'chat')
    await message.answer(f"üèõÔ∏è **Artemius:** –ü–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å \"{message.text}\"\n\n–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç!", parse_mode="Markdown")

@dp.message(StateFilter(BotStates.waiting_for_image_prompt))
async def process_image_generation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    use_feature(user_id, 'images')
    await message.answer(f"üé® **–°–æ–∑–¥–∞—é:** {message.text}\n\n–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!", parse_mode="Markdown")

@dp.message(StateFilter(BotStates.waiting_for_music_prompt))
async def process_music_generation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    use_feature(user_id, 'music')
    await message.answer(f"üéµ **–°–æ–∑–¥–∞—é –º—É–∑—ã–∫—É:** {message.text}\n\n–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—è!", parse_mode="Markdown")

@dp.message(StateFilter(BotStates.waiting_for_video_prompt))
async def process_video_generation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    use_feature(user_id, 'video')
    await message.answer(f"üé¨ **–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ:** {message.text}\n\n–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å HD –≤–∏–¥–µ–æ!", parse_mode="Markdown")

@dp.message(StateFilter(BotStates.waiting_for_document), F.photo)
async def process_document_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    use_feature(user_id, 'documents')
    await message.answer("üìÑ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...**\n\n–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –≤–µ—Å—å —Ç–µ–∫—Å—Ç!", parse_mode="Markdown")

@dp.message()
async def handle_unknown_message(message: types.Message):
    user_id = message.from_user.id
    await message.answer("ü§î **–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É**", reply_markup=await get_main_menu(user_id))

# MAIN –§–£–ù–ö–¶–ò–Ø –î–õ–Ø REPLIT
async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è keep-alive"""
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ Replit"""
    try:
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(start_web_server())

        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üèõÔ∏è ARTEMIUS AI - –ó–ê–ü–£–©–ï–ù –ù–ê REPLIT!")
        logger.info(f"üì¢ –ö–∞–Ω–∞–ª—ã: {[ch['id'] for ch in REQUIRED_CHANNELS]}")
        logger.info("üåê Keep-alive —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω!")

        print("üèõÔ∏è ===== ARTEMIUS AI - REPLIT VERSION =====")
        print(f"üì¢ VIP –∫–∞–Ω–∞–ª—ã: @kanal1kkal –∏ @kanal2kkal")  
        print("üÜì –ë–ï–°–ü–õ–ê–¢–ù–´–ô –•–û–°–¢–ò–ù–ì –° KEEP-ALIVE!")
        print("üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://your-repl-name.your-username.repl.co")

        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Artemius AI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
